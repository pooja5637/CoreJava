
-> In java, programmer is responsible only for creation of objects and programmer is not responsible to destroy useless objects.

-> The main objective of garbage collector is to destroy useless objects.

-> Even though programmer is not responsible to destroy useless objects, it is highly recommended to make an object eligible for GC if i is no longer required.

-> An object is said to be eligible for GC  if and only if it does not contain any reference variable.

# The ways to make an object eligible for garbage collector.
	1.Nullifying the reference variable
	2.Reassigning the reference variable.
	3.Objects created inside a method.
	
---------------------------------------------------------------------
	
-> Once we made an object eligible for GC it may not be destroyed immediately by garbage collector

-> Whenever JVM runs Garbage Collector then only the objects will be destroyed.but when exactly JVM run GC we can't expect it is varied from JVM to JVM.

-> Instead of waiting until JVM runs GC we can request JVM to run garbage collector programatically but whether JVM accept our request or not there is no guarantee.

-> But most of the time JVM accept our request.

# The methods for requesting JVM to run GC
	1.By using System class
	2.By Using Runtime Class
	
1.By using System class:

-> System class contains a static method gc() for this purpose.
	eg. System.gc();
	
2.By using Runtime class:

-> Java application can communicate with JVM by using Runtime object.

-> Runtime class present in java.lang package and it is a singletone class.

-> We can create runtime object by using Runtime.getRuntime().
	eg. Runtime r = Runtime.getRuntime();
	
-> Once we got runtime object we can call the following methods on that object.
	
	- totalMemory() -> returns number of bytes of total memory present in the heap(i.e. heap size)
	- freeMemory() -> returns number of bytes of free memory present in the heap.
	- gc() -> for requesting JVM to run GC.
	
-> Note: gc() present in System class is a static method, whereas gc() present in runtime class is a instance method.

-> Following are valid ways for requesting JVM to run GC?

	1. System.gc();
	2. Runtime.getRuntime().gc();





